group dogfood;

testclass(classname, functions) ::= <<
package edu.utwente.vb;

import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import static junit.framework.Assert.*;

import org.antlr.runtime.RecognitionException;
import org.antlr.runtime.MismatchedTokenException;
import org.antlr.runtime.MissingTokenException;
import org.antlr.runtime.FailedPredicateException;
import org.antlr.runtime.NoViableAltException;
import org.antlr.runtime.MismatchedTreeNodeException;

import org.antlr.runtime.tree.RewriteEmptyStreamException;

import org.junit.Test;

import edu.utwente.vb.example.*;
import edu.utwente.vb.exceptions.*;
import edu.utwente.vb.example.util.Utils;
import edu.utwente.vb.example.asm.ASMAdapter;
import edu.utwente.vb.example.CodeGenerator.OutputMode;
import java.lang.reflect.Method;
import java.lang.reflect.InvocationTargetException;

import edu.utwente.vb.example.NonBlockingBuiltins;

public class <classname> extends AbstractGrammarTest {
<functions>
}

>>

testParser(filename, testname, rule, uitleg) ::= <<
  /**
  <uitleg>
  */
	@Test
	public void test<testname>() throws IOException, RecognitionException, URISyntaxException{
	 log.debug("test<testname>");
		File f = new File(getClass().getResource("/<filename>").toURI());
		Parser parser = createParser(asCharStream(f));
		parser.<rule>();
	}
	
>>
/**
  <uitleg>
  */
testParserWithExpected(filename, testname, rule, expected, uitleg) ::= <<
  @Test(expected=<expected>.class)
  public void test<testname>() throws IOException, RecognitionException, URISyntaxException{
    log.debug("test<testname> expected: <expected>");
    File f = new File(getClass().getResource("/<filename>").toURI());
    Parser parser = createParser(asCharStream(f));
    parser.<rule>();
  }
  
>>

testChecker(filename, testname, rule, uitleg) ::= <<
  /**
  <uitleg>
  */
  @Test
  public void test<testname>() throws IOException, RecognitionException, URISyntaxException{
    log.debug("test<testname>");
    File f = new File(getClass().getResource("/<filename>").toURI());
    Checker checker = createChecker(asCharStream(f), createParser(asCharStream(f)));
    checker.<rule>();
  }
  
>>
/**
  <uitleg>
  */
testCheckerWithExpected(filename, testname, rule, expected, uitleg) ::= <<
  @Test(expected=<expected>.class)
  public void test<testname>() throws IOException, RecognitionException, URISyntaxException{
    log.debug("test<testname> expected: <expected>");
    File f = new File(getClass().getResource("/<filename>").toURI());
    Checker checker = createChecker(asCharStream(f), createParser(asCharStream(f)));
    checker.<rule>();
  }
  
>>

testCodegenPreparation(filename, testname, rule, uitleg) ::= <<
  /**
  <uitleg>
  */
  @Test
  public void test<testname>() throws IOException, RecognitionException, URISyntaxException{
    log.debug("test<testname>");
    File f = new File(getClass().getResource("/<filename>").toURI());
    CodegenPreparation prepare = createCodegenPreparation(asCharStream(f), createParser(asCharStream(f)));
    prepare.<rule>();
  }
  
>>
/**
  <uitleg>
  */
testCodegenPreparationWithExpected(filename, testname, rule, expected, uitleg) ::= <<
  @Test(expected=<expected>.class)
  public void test<testname>() throws IOException, RecognitionException, URISyntaxException{
    log.debug("test<testname> expected: <expected>");
    File f = new File(getClass().getResource("/<filename>").toURI());
    CodegenPreparation prepare = createCodegenPreparation(asCharStream(f), createParser(asCharStream(f)));
    prepare.<rule>();
  }
  
>>


testCodegen(filename, testname, rule, uitleg) ::= <<
  /**
  <uitleg>
  */
  @Test
  public void test<testname>() throws IOException, RecognitionException, URISyntaxException, ClassNotFoundException, InstantiationException, IllegalAccessException, SecurityException, IllegalArgumentException, Throwable{
    log.debug("test<testname>");
    File f = new File(getClass().getResource("/<filename>").toURI());
    CodeGenerator gen = createCodegenerator(asCharStream(f), createParser(asCharStream(f)));
    //Adapter
    ASMAdapter adap = new ASMAdapter(Utils.camelCaseName("<filename>"), NonBlockingBuiltins.class);
    gen.setOutputMode(OutputMode.FILE);
    gen.setASMAdapter(adap);
    gen.setFile(new File(new File(getClass().getResource("/<filename>").toURI()).getParentFile(), Utils.camelCaseName("<filename>") + ".class"));
    gen.<rule>();
   	try{
	    Class compiled = Class.forName(Utils.camelCaseName("<filename>"));
	    Object instance = compiled.newInstance();
	    Method main = compiled.getMethod("main");
	    main.invoke(instance);
	} catch(NoSuchMethodException e){
		//	klasse zonder main - niet uitvoerbaar dus ook niet draaien
	} catch(InvocationTargetException e){
		// InvocationTargetException bevat een gewrapte exceptie uit onze compiler - die gooien
		throw e.getCause();
	}
  }
  
>>
/**
  <uitleg>
  */
testCodegenWithExpected(filename, testname, rule, expected, uitleg) ::= <<
  @Test(expected=<expected>.class)
  public void test<testname>() throws IOException, RecognitionException, URISyntaxException, ClassNotFoundException, InstantiationException, IllegalAccessException, SecurityException, IllegalArgumentException, Throwable{
    log.debug("test<testname> expected: <expected>");
    File f = new File(getClass().getResource("/<filename>").toURI());
    CodeGenerator gen = createCodegenerator(asCharStream(f), createParser(asCharStream(f)));
    //Adapter
    ASMAdapter adap = new ASMAdapter(Utils.camelCaseName("<filename>"), NonBlockingBuiltins.class);
    gen.setOutputMode(OutputMode.FILE);
    gen.setASMAdapter(adap);
    gen.setFile(new File(new File(getClass().getResource("/<filename>").toURI()).getParentFile(), Utils.camelCaseName("<filename>") + ".class"));
    gen.<rule>();
	// Load the newly compiled class & invoke the generated method    
   	try{
	    Class compiled = Class.forName(Utils.camelCaseName("<filename>"));
	    Object instance = compiled.newInstance();
	    Method main = compiled.getMethod("main");
	    main.invoke(instance);
	} catch(NoSuchMethodException e){
		//	klasse zonder main - niet uitvoerbaar dus ook niet draaien
	} catch(InvocationTargetException e){
		// InvocationTargetException bevat een gewrapte exceptie uit onze compiler - die gooien
		throw e.getCause();
	}
  }
  
>>
